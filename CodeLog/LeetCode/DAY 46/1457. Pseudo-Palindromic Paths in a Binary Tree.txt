//Link to the Question (https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/submissions/1155388880/?envType=daily-question&envId=2024-01-24)


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    int pseudoPalindromicPaths(TreeNode* root) {
        int count = 0;
        unordered_map<int, int> digitCount;
        dfs(root, digitCount, count);
        return count;
    }

private:
    void dfs(TreeNode* node, unordered_map<int, int>& digitCount, int& count) {
        if (!node) return;

        digitCount[node->val]++;

        if (!node->left && !node->right) {
            if (isPseudoPalindromic(digitCount)) {
                count++;
            }
        }
        dfs(node->left, digitCount, count);
        dfs(node->right, digitCount, count);
        digitCount[node->val]--;
    }

    bool isPseudoPalindromic(const unordered_map<int, int>& digitCount) {
        int oddCount = 0;

        for (const auto& pair : digitCount) {
            if (pair.second % 2 != 0) {
                oddCount++;
            }
        }
        return oddCount <= 1;
    }
};