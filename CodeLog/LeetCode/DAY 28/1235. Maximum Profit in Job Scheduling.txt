//Link to the Question (https://leetcode.com/problems/maximum-profit-in-job-scheduling/submissions/1138787629/?envType=daily-question&envId=2024-01-06)


class Solution {
public:
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
    int n = startTime.size();
    vector<vector<int>> jobs;
    for (int i = 0; i < n; ++i) {
        jobs.push_back({endTime[i], startTime[i], profit[i]});
    }
    sort(jobs.begin(), jobs.end());
    vector<pair<int, int>> dp = {{0, 0}};
    for (auto job:jobs) {
        int start = job[1];
        int end = job[0];
        int p = job[2];
        int prevIdx = upper_bound(dp.begin(), dp.end(), make_pair(start, INT_MAX)) - dp.begin() - 1;
        int maxProfit = max(dp[prevIdx].second + p, dp.back().second);
        dp.emplace_back(end, maxProfit);
    }
    return dp.back().second;
    }
};