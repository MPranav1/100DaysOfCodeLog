//Link to the Question (https://leetcode.com/problems/leaf-similar-trees/submissions/1141581747/?envType=daily-question&envId=2024-01-09)


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> leafSequence1, leafSequence2;
        getLeafSequence(root1, leafSequence1);
        getLeafSequence(root2, leafSequence2);
        
        return leafSequence1 == leafSequence2;
    }
    
private:
    void getLeafSequence(TreeNode* root, vector<int>& leafSequence) {
        if (!root) return;
        
        stack<TreeNode*> nodes;
        nodes.push(root);
        
        while (!nodes.empty()) {
            TreeNode* current = nodes.top();
            nodes.pop();
            
            if (!current->left && !current->right) {
                leafSequence.push_back(current->val);
            }
            
            if (current->right) {
                nodes.push(current->right);
            }
            
            if (current->left) {
                nodes.push(current->left);
            }
        }
    }
};